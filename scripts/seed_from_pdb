#! /usr/bin/env python
"""
Use a PDB file to solvate, minimize, and equilibrate a simulation.
"""

import argparse
import os
from os.path import basename
from glob import iglob

from mdcookbook import __author__
from mdcookbook.core import solvate
from mdcookbook.core import get_sim, get_ff, get_state
from mdcookbook.utils import timing, serializeObject

from simtk.openmm import Platform, Vec3
from simtk.openmm.app import PDBReporter, PDBFile


def run(pdb, n_clones, temp, boxsize,
        maxiter, n_steps, smolar, platform, device):

    dirname = basename(pdb)

    if platform == "CUDA":
        props = {'CudaPrecision': 'mixed', 'CudaDeviceIndex': device}
    elif platform == "OpenCL":
        props = {'OpenCLPrecision': 'mixed', 'OpenCLDeviceIndex': device}
    else:
        props = {}

    with timing('Load files'):
        pdb = PDBFile(pdb)
        ff = get_ff()

    with timing('Solvation'):
        watbox = solvate(pdb.positions, pdb.topology, ff, smolar, boxsize)

    minimizer, _, _ = get_sim(watbox.positions, watbox.topology, temp,
                              ff, Platform.getPlatformByName('CPU'), {})

    with timing('Minimization'):
        minimizer.minimizeEnergy(maxIterations=1000)

    simulation, system, integrator = get_sim(
        minimizer.context.getState(getPositions=True).getPositions(),
        watbox.topology, temp, ff, platform, props)
    simulation.context.setVelocitiesToTemperature(300)

    if not os.path.exists('./solv_pdb/'):
        os.makedirs('./solv_pdb/')

    simulation.reporters.append(
        PDBReporter('./solv_pdb/%s' % pdb, n_steps))

    with timing('Equilibration'):
        simulation.context.setVelocitiesToTemperature(temp)
        simulation.step(n_steps)

    with timing('Serialization'):
        serializeObject(system, dirname, 'system.xml')
        serializeObject(integrator, dirname, 'integrator.xml')
        for i in xrange(n_clones):
            serializeObject(get_state(simulation, temp),
                            dirname, 'state%d.xml' % i)
    print("Done!")


def parse_cmdln():
    parser = argparse.ArgumentParser(
        epilog="Written by %s" % __author__,
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-f', '--input', dest='pdb',
                        help='Glob string to find PDB files.',
                        required=True)
    parser.add_argument('-pt', '--platform', dest='platform',
                        help='Platform type.', default="CPU")
    parser.add_argument('-d', '--device-index', dest='device',
                        help='GPU device index.', default=0, type=int)
    parser.add_argument('-nc', '--n-clones', dest='n_clones',
                        help='Number of clones to create.', default=5,
                        type=int)
    parser.add_argument('-n', '--n-steps', dest='n_steps',
                        help='Number of equilibration steps.',
                        default=50000, type=int)
    parser.add_argument('-i', '--max-iterations', dest='maxiter',
                        help='Max iterations for minimization.',
                        default=1000, type=int)
    parser.add_argument('-c', '--solvent-concentation', dest='smolar',
                        help='Solvent concentration.',
                        default=0.1, type=float)
    parser.add_argument('-t', '--temperature', dest='temp',
                        help='Simulation temperature (Kelvin).',
                        default=300, type=int)
    parser.add_argument('-b', '--box-size', dest='boxsize',
                        help='Boxsize expressed as: Vec3(x, y, z).',
                        default='Vec3(5, 5, 5)')
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    options = parse_cmdln()
    structures = iglob(options.pdb)

    boxsize = None
    eval('boxsize=%s' % options.boxsize)
    if not isinstance(boxsize, Vec3):
        raise TypeError('boxsize must be expressed as Vec3')

    for pdb in structures:
        run(pdb, options.n_clones, options.temp,
            boxsize, options.maxiter, options.n_steps, options.smolar,
            options.platform, str(options.device))
