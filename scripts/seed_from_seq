#! /usr/bin/env python
"""
Solvate and equilibrate a protein simulation from a primary sequence.
"""

from __future__ import print_function

import argparse
import os
from os.path import basename

from mdcookbook import __author__
from mdcookbook.core import model_from_seq, solvate, smart_solvate
from mdcookbook.core import get_sim, get_ff, get_state, unpack_pose
from mdcookbook.utils import timing, serialize

from simtk.openmm import Platform, Vec3
from simtk.openmm.app import PDBReporter


def run(seq, out, n_clones, temp, boxsize, n_wat,
        max_iter, n_steps, ion_content, platform, device):

    name = basename(out).split('.')[0]
    forcefield = get_ff()

    if platform == "CUDA":
        props = {'CudaPrecision': 'mixed', 'CudaDeviceIndex': device}
    elif platform == "OpenCL":
        props = {'OpenCLPrecision': 'mixed', 'OpenCLDeviceIndex': device}
    else:
        props = {}

    platform = Platform.getPlatformByName(platform)

    with timing('Modeling'):
        pose = model_from_seq(seq)
        positions, topology = unpack_pose(pose)

    with timing('Solvation'):
        if n_wat is not None:
            wat_box = smart_solvate(positions, topology, forcefield,
                                    ion_content, n_wat)
        else:
            wat_box = solvate(positions, topology, forcefield,
                              ion_content, box_size)

    minimizer, _, _ = get_sim(wat_box.positions, wat_box.topology, temp,
                              forcefield, Platform.getPlatformByName('CPU'),
                              {})

    with timing('Minimization'):
        minimizer.minimizeEnergy(maxIterations=max_iter)

    simulation, system, integrator = get_sim(
        minimizer.context.getState(getPositions=True).getPositions(),
        wat_box.topology, temp, forcefield, platform, props)

    if not os.path.exists('./solv_pdb/'):
        os.makedirs('./solv_pdb/')

    simulation.reporters.append(
        PDBReporter('./solv_pdb/%s.pdb' % out, n_steps))

    with timing('Equilibration'):
        simulation.context.setVelocitiesToTemperature(temp)
        simulation.step(n_steps)

    with timing('Serialization'):
        serialize(system, name, 'system.xml')
        serialize(integrator, name, 'integrator.xml')
        for i in xrange(n_clones):
            serialize(get_state(simulation, temp), name, 'state%d.xml' % i)
    print("Done!")


def parse_cmdln():
    parser = argparse.ArgumentParser(
        epilog="Written by %s" % __author__,
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('-s', '--sequence', dest='seq',
                        help='String of single-letter amino acid codes.',
                        required=True)
    parser.add_argument('-o', '--out', dest='out',
                        help='Name of output directory and files.',
                        required=True)
    parser.add_argument('-pt', '--platform', dest='platform',
                        help='Platform type.', default="CPU")
    parser.add_argument('-d', '--device-index', dest='device',
                        help='GPU device index.', default=0, type=int)
    parser.add_argument('-nc', '--n-clones', dest='n_clones',
                        help='Number of clones to create.', default=5,
                        type=int)
    parser.add_argument('-n', '--n-steps', dest='n_steps',
                        help='Number of equilibration steps.',
                        default=50000, type=int)
    parser.add_argument('-i', '--max-iterations', dest='max_iter',
                        help='Max iterations for minimization.',
                        default=1000, type=int)
    parser.add_argument('-c', '--ion-concentation', dest='ion_content',
                        help='Ion concentration.',
                        default=0.1, type=float)
    parser.add_argument('-t', '--temperature', dest='temp',
                        help='Simulation temperature (Kelvin).',
                        default=300, type=int)
    parser.add_argument('-b', '--box-size', dest='box_size',
                        help='Boxsize expressed as: Vec3(x, y, z).',
                        default='Vec3(5, 5, 5)')
    parser.add_argument('-w', '--n-waters', dest='n_wat',
                        help='Number of waters in solvent '
                        '(Overrides box_size).',
                        default=None, type=int)
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    options = parse_cmdln()

    try:
        from rosetta import init
        init()
    except ImportError:
        raise ImportError('You need PyRosetta to use this script.')

    box_size = None
    exec('box_size = %s' % options.box_size)
    if not isinstance(box_size, Vec3):
        raise TypeError('box_size must be expressed as Vec3')

    run(options.seq, options.out, options.n_clones, options.temp,
        box_size, options.n_wat, options.max_iter, options.n_steps,
        options.ion_content, options.platform, str(options.device))
