#! /usr/bin/env python
"""
Mutate a single amino acid in an existing PDB and start a round of
equilibration.
"""

from __future__ import print_function

from glob import iglob
import os


from mdcookbook.core import model, solvate, smart_solvate
from mdcookbook.core import get_sim, get_ff, get_state, unpack_pose
from mdcookbook.utils import timing, serialize, get_args

from simtk.openmm import Platform, Vec3
from simtk.openmm.app import PDBReporter
from os.path import basename


def run(pdb, mut_pos, mut, n_clones, temp, box_size, n_wat,
        max_iter, n_steps, ion_content, platform, device):

    name = basename(pdb).split('.')[0]
    forcefield = get_ff()

    if platform == "CUDA":
        props = {'CudaPrecision': 'mixed', 'CudaDeviceIndex': device}
    elif platform == "OpenCL":
        props = {'OpenCLPrecision': 'mixed', 'OpenCLDeviceIndex': device}
    else:
        props = {}

    platform = Platform.getPlatformByName(platform)

    with timing('Modeling'):
        pose = model(pdb, mutpos=mut_pos, mut=mut)
        positions, topology = unpack_pose(pose)

    with timing('Solvation'):
        if n_wat is not None:
            wat_box = smart_solvate(positions, topology, forcefield,
                                    ion_content, n_wat)
        else:
            wat_box = solvate(positions, topology, forcefield,
                              ion_content, box_size)

    minimizer, _, _ = get_sim(wat_box.positions, wat_box.topology, temp,
                              forcefield, Platform.getPlatformByName('CPU'),
                              {})

    with timing('Minimization'):
        minimizer.minimizeEnergy(maxIterations=max_iter)

    simulation, system, integrator = get_sim(
        minimizer.context.getState(getPositions=True).getPositions(),
        wat_box.topology, temp, forcefield, platform, props)

    if not os.path.exists('./solv_pdb/'):
        os.makedirs('./solv_pdb/')

    simulation.reporters.append(
        PDBReporter('./solv_pdb/%s.pdb' % name, n_steps))

    with timing('Equilibration'):
        simulation.context.setVelocitiesToTemperature(temp)
        simulation.step(n_steps)

    with timing('Serialization'):
        serialize(system, name, 'system.xml')
        serialize(integrator, name, 'integrator.xml')
        for i in xrange(n_clones):
            serialize(get_state(simulation, temp), name, 'state%d.xml' % i)
    print("Done!")


def parse_cmdln():
    parser = get_args()
    parser.add_argument('-f', '--input', dest='f',
                        help='Glob string to find PDB files.', required=True)
    parser.add_argument('-p', '--mut-position', dest='mut_pos',
                        help='Position of desired mutation.', type=int,
                        required=True)
    parser.add_argument('-m', '--mutation', dest='mut',
                        help='Rosetta residue string.', required=True)
    args = parser.parse_args()
    return args


if __name__ == "__main__":
    options = parse_cmdln()

    try:
        from rosetta import init
        init()
    except ImportError:
        raise ImportError('You need PyRosetta to use this script.')

    files = iglob(options.f)

    box_size = None
    exec('box_size = %s' % options.box_size)
    if not isinstance(box_size, Vec3):
        raise TypeError('box_size must be expressed as Vec3')

    for f in files:
        run(f, options.mut_pos, options.mut, options.n_clones, options.temp,
            box_size, options.n_wat, options.max_iter, options.n_steps,
            options.ion_content, options.platform, str(options.device))
